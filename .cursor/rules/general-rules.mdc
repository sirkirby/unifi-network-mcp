---
description: UniFi Network MCP Server development rules - references project constitution
globs:
alwaysApply: true
---

# Source of Truth

**All development standards, patterns, and practices are defined in the project constitution.**

See: `.specify/memory/constitution.md`

This file provides quick-reference guidance for Cursor IDE. For authoritative standards,
consult the constitution.

---

# Quick Reference

## Objective

MCP server to host tools which allow AI to work with a local UniFi Network application.

## Core Standards (from Constitution)

### Code Style
- Use idiomatic Python 3.13+
- Use CONST naming for module-level strings
- Follow type hints strictly
- Use uv for virtual environment and package dependencies
- Leverage aiounifi library patterns for UniFi controller connectivity
- Leverage official MCP SDK for Python and its established patterns
- All MCP tools MUST be prefixed with `unifi_`

### Security
- Local installation and hosting for local agent access only
- All tools that modify state or disrupt availability MUST require explicit confirmation
- Mutating operations disabled by default in configuration

### Documentation
- Keep README.md up to date with all changes
- Do NOT add unnecessary comments to code
- Use docstrings for public APIs
- If extensive comments needed, maintain changelog.md in root (add to .gitignore)

## Resources

- Constitution: `.specify/memory/constitution.md` (PRIMARY REFERENCE)
- MCP SDK: https://github.com/modelcontextprotocol/python-sdk
- aiounifi: https://github.com/Kane610/aiounifi
- README: `README.md` (user-facing documentation)

---

For questions about architectural decisions or edge cases, consult `.specify/memory/constitution.md`.
